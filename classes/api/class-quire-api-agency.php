<?php


class Quire_API_Agency extends Quire_API_Abstract implements Quire_API_Agency_Interface {

	protected Quire_Repo_Agency $base_repo;
	protected Quire_Repo_User $user_repo;

	public function __construct( $rest_base = 'agencies' ) {
		parent::__construct( $rest_base );
		$this->base_repo = new Quire_Repo_Agency();
		$this->user_repo = new Quire_Repo_User();
	}

	protected function getRoutes() {
		// TODO: Implement getRoutes() method.
		return [
			array(
				array(
					'methods'             => WP_REST_Server::READABLE,
					'callback'            => array( $this, 'get_items' ),
					'permission_callback' => array( $this, 'get_items_permissions_check' ),
					'args'                => $this->get_collection_params(),
				)
			),
			'(?P<id>[\d]+)' => array(
				array(
					'methods'             => WP_REST_Server::READABLE,
					'callback'            => array( $this, 'get_item' ),
					'permission_callback' => array( $this, 'get_item_permissions_check' ),
					'args'                => array(
						'id' => array(
							'description' => __( 'Unique identifier for the agency.' ),
							'type'        => 'integer',
						),
					),
				),
				'schema' => array( $this, 'get_public_item_schema' ),
			)
		];
	}

	public function get_items_permissions_check( $request ) {
		return $this->get_item_permissions_check( $request );
	}

	public function get_items( $request ) {
		$agencies     = array();
		$current_user = $this->user_repo->getCurrentItem( true );
		if ( $this->user_repo->isRole( AGENCY_ADMIN_ROLE, $current_user ) ) {
			$agency = $current_user->getAgency();
			if ( $agency) {
				$agencies[] = $agency;
			}
		} elseif ( $this->user_repo->isRole( ADMIN_ROLE, $current_user ) ) {
			$agencies = $this->base_repo->getItems( array(), true );
		}

		$data = array();
		foreach ( $agencies as $agency ) {
			$data[] = $this->prepare_item_for_response( $agency, $request );
		}

		$response = rest_ensure_response( $data );

		return $response;
	}

	public function get_item_permissions_check( $request ) {
		$current_user = $this->user_repo->getCurrentItem();
		if ( ! $current_user ) {
			return new WP_Error(
				'rest_user_no_login',
				__( 'User not logged in.' ),
				array( 'status' => 404 )
			);
		}

		if ( ! $this->user_repo->isRole( ADMIN_ROLE, $current_user )
		     && ! $this->user_repo->isRole( AGENCY_ADMIN_ROLE, $current_user ) ) {
			return new WP_Error(
				'rest_user_no_permission',
				__( 'User have not permission to a agency!' ),
				array( 'status' => 404 )
			);
		}
		return true;
	}

	public function get_item( $request ) {
		$current_user = $this->user_repo->getCurrentItem( true );

		$agency = false;
		if ( $this->user_repo->isRole( AGENCY_ADMIN_ROLE, $current_user ) ) {
			$agency = $current_user->getAgency();
			if ( $agency->getID() != $request['id'] ) {
				$agency = false;
			}
		} elseif ( $this->user_repo->isRole( ADMIN_ROLE, $current_user ) ) {
			$agency = $this->base_repo->getItem( $request['id'], true );
		}

		if ( ! $agency ) {
			return new WP_Error(
				'rest_agency_invalid_id',
				__( 'Invalid agency ID.' ),
				array( 'status' => 404 )
			);
		}

		$data     = $this->prepare_item_for_response( $agency, $request );
		$response = rest_ensure_response( $data );

		return $response;
	}

	public function prepare_item_for_response( $item, $request ) {
		return $item; // TODO: Change the autogenerated stub
	}

	public function get_item_schema() {
		return parent::get_item_schema(); // TODO: Change the autogenerated stub
	}

	public function get_collection_params() {
		return array(); // TODO: Change the autogenerated stub
	}

}