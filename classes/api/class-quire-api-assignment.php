<?php


class Quire_API_Assignment extends Quire_API_Abstract implements Quire_API_Assignment_Interface {

	protected Quire_Repo_Assignment $base_repo;
	protected Quire_Repo_User $user_repo;
	protected Quire_Repo_Caregiver $caregiver_repo;

	public function __construct( $rest_base = 'assignments' ) {
		parent::__construct( $rest_base );
		$this->base_repo      = new Quire_Repo_Assignment();
		$this->user_repo      = new Quire_Repo_User();
		$this->caregiver_repo = new Quire_Repo_Caregiver();
	}

	protected function getRoutes() {
		// TODO: Implement getRoutes() method.
		return [
			array(
				array(
					'methods'             => WP_REST_Server::READABLE,
					'callback'            => array( $this, 'get_items' ),
					'permission_callback' => array( $this, 'get_items_permissions_check' ),
					'args'                => $this->get_collection_params(),
				)
			),
			'(?P<status>' . ASSIGNMENT_STATUS_ACTIVE . '|' . ASSIGNMENT_STATUS_COMPLETED . ')?' => array(
				array(
					'methods'             => WP_REST_Server::READABLE,
					'callback'            => array( $this, 'get_items' ),
					'permission_callback' => array( $this, 'get_items_permissions_check' ),
					'args'                => $this->get_collection_params(),
				)
			),
			'(?P<id>[\d]+)'                                                                     => array(
				'args'   => array(
					'id' => array(
						'description' => __( 'Unique identifier for the assignment.' ),
						'type'        => 'integer',
					),
				),
				array(
					'methods'             => WP_REST_Server::READABLE,
					'callback'            => array( $this, 'get_item' ),
					'permission_callback' => array( $this, 'get_item_permissions_check' )
				),
				'schema' => array( $this, 'get_public_item_schema' ),
			)
		];
	}

	public function get_items_permissions_check( $request ) {
		$current_user = $this->user_repo->getCurrentItem();
		if ( ! $current_user ) {
			return new WP_Error(
				'rest_user_no_login',
				__( 'User not logged in.' ),
				array( 'status' => 404 )
			);
		}

		return true; // TODO: Change the autogenerated stub
	}

	public function get_items( $request ) {
		$registered = $this->get_collection_params();

		$parameter_mappings = array();

		$prepared_args = array();

		foreach ( $parameter_mappings as $api_param => $wp_param ) {
			if ( isset( $registered[ $api_param ], $request[ $api_param ] ) ) {
				$prepared_args[ $wp_param ] = $request[ $api_param ];
			}
		}

		if ( isset( $registered['status'] ) ) {
			$status_possibles = array(
				'active'    => ASSIGNMENT_STATUS_ACTIVE,
				'completed' => ASSIGNMENT_STATUS_COMPLETED
			);
			$status           = $status_possibles[ $request['status'] ];
		}

		$assignments  = [];
		$current_user = $this->user_repo->getCurrentItem( true );
		if ( $this->user_repo->isRole( CAREGIVER_ROLE, $current_user ) ) {
			/** @var Quire_Data_Caregiver $current_caregiver */
			$current_caregiver        = $this->caregiver_repo->getCurrentItem();
			$assignments              = $current_caregiver->getAssignments();
			$prepared_args['include'] = $assignments;
			$assignments              = $this->base_repo->getItems( $prepared_args );
		} elseif ( $this->user_repo->isRole( AGENCY_ADMIN_ROLE, $current_user ) ) {
			/** @var Quire_Data_Agency $agency */
			$agency                   = $current_user->getAgency();
			$assignments              = $agency->getOrders();
			$prepared_args['include'] = $assignments;
			$assignments              = $this->base_repo->getItems( $prepared_args, true );
		}

		$data = array();
		/** @var Quire_Data_Assignment $assignment */
		foreach ( $assignments as $assignment ) {
			/** @var Quire_Data_Assignment_Progress $progress */
			$progress = $assignment->getProgress();
			if ( isset( $status ) && $progress && ( ( $status == ASSIGNMENT_STATUS_COMPLETED && $progress->getPercent() >= 100 )
			                                        || ( $status == ASSIGNMENT_STATUS_ACTIVE && $progress->getPercent() < 100 ) ) ) {
				$data[] = $this->prepare_item_for_response( $assignment, $request );
			}
		}

		$response = rest_ensure_response( $data );

		return $response;
	}

	public function prepare_item_for_response( $item, $request ) {
		return $item; // TODO: Change the autogenerated stub
	}

	public function get_item_permissions_check( $request ) {
		$current_user = $this->user_repo->getCurrentItem( true );
		if ( ! $current_user ) {
			return new WP_Error(
				'rest_user_no_login',
				__( 'User not logged in.' ),
				array( 'status' => 404 )
			);
		}
		if ( $this->user_repo->isRole( CAREGIVER_ROLE, $current_user ) ) {
			/** @var Quire_Data_Caregiver $current_caregiver */
			$current_caregiver = $this->caregiver_repo->getCurrentItem();
			$assignments       = $current_caregiver->getAssignments();
		} elseif ( $this->user_repo->isRole( AGENCY_ADMIN_ROLE, $current_user ) ) {
			/** @var Quire_Data_Agency $agency */
			$agency      = $current_user->getAgency();
			$assignments = $agency->getOrders();
		}
		if ( ! in_array( $request['id'], $assignments ) ) {
			return new WP_Error(
				'rest_user_no_permission',
				__( 'User have not permission to a caregiver!' ),
				array( 'status' => 404 )
			);
		}

		return true;
	}

	public function get_item( $request ) {
		$assignment = $this->base_repo->getItem( $request['id'] );

		if ( ! $assignment ) {
			return new WP_Error(
				'rest_assignment_invalid_id',
				__( 'Invalid assignment ID.' ),
				array( 'status' => 404 )
			);
		}

		$data     = $this->prepare_item_for_response( $assignment, $request );
		$response = rest_ensure_response( $data );

		return $response;
	}

	public function get_item_schema() {
		return parent::get_item_schema(); // TODO: Change the autogenerated stub
	}

	public function get_collection_params() {
		return array(
			'status' => array(
				'default'     => 'active',
				'description' => __( 'status for assignment.' ),
				'enum'        => array(
					'active',
					'completed'
				),
				'type'        => 'string',
			)
		);
	}


}