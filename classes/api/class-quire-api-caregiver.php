<?php


class Quire_API_Caregiver extends Quire_API_User {

	protected Quire_Repo_Caregiver $base_repo;
	protected Quire_Repo_Agency $agency_repo;

	public function __construct( $rest_base = 'caregivers' ) {
		parent::__construct( $rest_base );
		$this->base_repo   = new Quire_Repo_Caregiver();
		$this->agency_repo = new Quire_Repo_Agency();
	}

	protected function getRoutes() {
		// TODO: Implement getRoutes() method.
		return [
			array(
				array(
					'methods'             => WP_REST_Server::READABLE,
					'callback'            => array( $this, 'get_items' ),
					'permission_callback' => array( $this, 'get_items_permissions_check' ),
					'args'                => $this->get_collection_params(),
				)
			),
			'(?P<id>[\d]+)' => array(
				'args'   => array(
					'id' => array(
						'description' => __( 'Unique identifier for the user.' ),
						'type'        => 'integer',
					),
				),
				array(
					'methods'             => WP_REST_Server::READABLE,
					'callback'            => array( $this, 'get_item' ),
					'permission_callback' => array( $this, 'get_item_permissions_check' ),
					'args'                => array(
						'context' => $this->get_context_param( array( 'default' => 'view' ) ),
					),
				),
				array(
					'methods'             => WP_REST_Server::EDITABLE,
					'callback'            => array( $this, 'update_item' ),
					'permission_callback' => array( $this, 'update_item_permissions_check' ),
					'args'                => $this->get_endpoint_args_for_item_schema( WP_REST_Server::EDITABLE ),
				),
				'schema' => array( $this, 'get_public_item_schema' ),
			)

		];
	}

	public function get_item_permissions_check( $request ) {
		$caregiver_id = $request['id'];

		$current_user = $this->base_repo->getCurrentUser( true );
		if ( ! $current_user ) {
			return new WP_Error(
				'rest_user_no_login',
				__( 'User not logged in.' ),
				array( 'status' => 404 )
			);
		}

		/** @var Quire_Data_Agency $agency */
		$agency = $current_user->getAgency();
		if ( ! $agency || ! in_array( $caregiver_id, $agency->getCaregivers() ) ) {
			return new WP_Error(
				'rest_user_no_permission',
				__( 'User have not permission to a caregiver!' ),
				array( 'status' => 404 )
			);
		}

		return true; // TODO: Change the autogenerated stub
	}

	public function get_item( $request ) {

		$caregiver = $this->base_repo->getItem( $request['id'] );

		if ( ! $caregiver ) {
			return new WP_Error(
				'rest_user_invalid_id',
				__( 'Invalid user ID.' ),
				array( 'status' => 404 )
			);;
		}

		$data     = $this->prepare_item_for_response( $caregiver, $request );
		$response = rest_ensure_response( $data );

		return $response;
	}

	public function prepare_item_for_response( $item, $request ) {
		return $item; // TODO: Change the autogenerated stub
	}

	public function get_items_permissions_check( $request ) {
		$agency_id = $request['agency'];
		if ( isset ( $agency_id ) ) {
			$current_user = $this->base_repo->getCurrentUser( true );
			if ( ! $current_user ) {
				return new WP_Error(
					'rest_user_no_login',
					__( 'User not logged in.' ),
					array( 'status' => 404 )
				);
			}

			/** @var Quire_Data_Agency $agency */
			$agency    = $this->agency_repo->getItem( $agency_id );
			$admin_ids = array_column( $agency->getAdministrators(), 'ID' );
			if ( ! in_array( $current_user->getID(), $admin_ids ) ) {
				return new WP_Error(
					'rest_user_no_permission',
					__( 'User have not permission to a agency!' ),
					array( 'status' => 404 )
				);
			}
		}

		return true; // TODO: Change the autogenerated stub
	}

	public function get_items( $request ) {

		$registered = $this->get_collection_params();

		$parameter_mappings = array(
			'order' => 'order',
		);

		$prepared_args = array();

		foreach ( $parameter_mappings as $api_param => $wp_param ) {
			if ( isset( $registered[ $api_param ], $request[ $api_param ] ) ) {
				$prepared_args[ $wp_param ] = $request[ $api_param ];
			}
		}

		if ( isset( $registered['orderby'] ) ) {
			$orderby_possibles        = array(
				'id'              => 'ID',
				'name'            => 'display_name',
				'registered_date' => 'registered',
				'slug'            => 'user_nicename',
				'email'           => 'user_email',
			);
			$prepared_args['orderby'] = $orderby_possibles[ $request['orderby'] ];
		}

		$prepared_args['role'] = CAREGIVER_ROLE;

		$agency = $request['agency'];
		if ( ! isset ( $agency ) ) {
			$current_user = $this->base_repo->getCurrentUser( true );

			/** @var Quire_Data_Agency $agency */
			$agency = $current_user->getAgency();
			if ( ! $agency ) {
				return new WP_Error(
					'rest_user_no_agency',
					__( 'User does not belong to a agency!' ),
					array( 'status' => 404 )
				);;
			}
			$agency = (string) $agency->getID();
		}

		$prepared_args['meta_query'][] = array(
			'key'     => 'agency',
			'value'   => $agency,
			'compare' => '='
		);

		$caregivers = $this->base_repo->getItems( $prepared_args );

		if ( ! $caregivers ) {
			return new WP_Error(
				'rest_user_no_agency',
				__( 'User does not belong to a agency!' ),
				array( 'status' => 404 )
			);
		}

		$data = array();
		foreach ( $caregivers as $caregiver ) {
			$data[] = $this->prepare_item_for_response( $caregiver, $request );
		}

		$response = rest_ensure_response( $data );

		return $response;
	}

	public function get_collection_params() {
		return array(
			'agency'  => array(
				'description' => __( 'agency ID to retrieve caregivers.(default:current user\'s agency)' ),
				'type'        => 'integer'
			),
			'order'   => array(
				'default'     => 'asc',
				'description' => __( 'Order sort attribute ascending or descending.' ),
				'enum'        => array( 'asc', 'desc' ),
				'type'        => 'string',
			),
			'orderby' => array(
				'default'     => 'name',
				'description' => __( 'Sort collection by object attribute.' ),
				'enum'        => array(
					'id',
					'name',
					'registered_date',
					'slug',
					'email',
				),
				'type'        => 'string',
			)
		);
	}

}