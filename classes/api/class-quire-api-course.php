<?php


class Quire_API_Course extends Quire_API_Abstract implements Quire_API_Course_Interface {

	protected Quire_Repo_Course $base_repo;
	protected Quire_Repo_User $user_repo;

	public function __construct( $rest_base = 'courses' ) {
		parent::__construct( $rest_base );
		$this->base_repo = new Quire_Repo_Course();
		$this->user_repo = new Quire_Repo_User();
	}

	protected function getRoutes() {
		// TODO: Implement getRoutes() method.
		return [
			array(
				array(
					'methods'             => WP_REST_Server::READABLE,
					'callback'            => array( $this, 'get_items' ),
					'permission_callback' => array( $this, 'get_items_permissions_check' ),
					'args'                => $this->get_collection_params(),
				)
			),
			'(?P<id>[\d]+)' => array(
				array(
					'methods'             => WP_REST_Server::READABLE,
					'callback'            => array( $this, 'get_item' ),
					'permission_callback' => array( $this, 'get_item_permissions_check' ),
					'args'                => array(
						'id' => array(
							'description' => __( 'Unique identifier for the course.' ),
							'type'        => 'integer',
						),
					),
				),
				'schema' => array( $this, 'get_public_item_schema' ),
			)
		];
	}

	public function get_items_permissions_check( $request ) {
		$current_user = $this->user_repo->getCurrentItem();
		if ( ! $current_user ) {
			return new WP_Error(
				'rest_user_no_login',
				__( 'User not logged in.' ),
				array( 'status' => 404 )
			);
		}

		return true;
	}

	public function get_items( $request ) {

		$registered = $this->get_collection_params();

		$parameter_mappings = array(
			'order'   => 'order',
			'orderby' => 'orderby',
			'search'  => 's',
			'slug'    => 'post_name__in'
		);

		$prepared_args = array();

		foreach ( $parameter_mappings as $api_param => $wp_param ) {
			if ( isset( $registered[ $api_param ], $request[ $api_param ] ) ) {
				$prepared_args[ $wp_param ] = $request[ $api_param ];
			}
		}

		$prepared_args['status'] = COURSE_STATUS_PUBLISH;

		$courses     = $this->base_repo->getItems($prepared_args, true);

		$data = array();
		/** @var Quire_Data_Assignment $course */
		foreach ( $courses as $course ) {
			$data[] = $this->prepare_item_for_response( $course, $request );
		}

		$response = rest_ensure_response( $data );

		return $response;
	}

	public function get_item_permissions_check( $request ) {
		$current_user = $this->user_repo->getCurrentItem();
		if ( ! $current_user ) {
			return new WP_Error(
				'rest_user_no_login',
				__( 'User not logged in.' ),
				array( 'status' => 404 )
			);
		}

		return true;
	}

	public function get_item( $request ) {
		$course = $this->base_repo->getItem( $request['id'], true );

		if ( ! $course ) {
			return new WP_Error(
				'rest_course_invalid_id',
				__( 'Invalid course ID.' ),
				array( 'status' => 404 )
			);
		}

		$data     = $this->prepare_item_for_response( $course, $request );
		$response = rest_ensure_response( $data );

		return $response;
	}

	public function get_item_schema() {
		return parent::get_item_schema(); // TODO: Change the autogenerated stub
	}

	public function prepare_item_for_response( $item, $request ) {
		return $item; // TODO: Change the autogenerated stub
	}

	public function get_collection_params() {
		return array(
			'search'   => array(
				'description'       => __( 'Limit results to those matching a string.' ),
				'type'              => 'string',
				'sanitize_callback' => 'sanitize_text_field',
				'validate_callback' => 'rest_validate_request_arg',
			),
			'slug'    => array(
				'description'       => __( 'Limit result set to posts with one or more specific slugs.' ),
				'type'              => 'array',
				'items'             => array(
					'type' => 'string',
				),
				'sanitize_callback' => 'wp_parse_slug_list',
			),
			'order'   => array(
				'default'     => 'asc',
				'description' => __( 'Order sort attribute ascending or descending.' ),
				'enum'        => array( 'asc', 'desc' ),
				'type'        => 'string',
			),
			'orderby' => array(
				'default'     => 'title',
				'description' => __( 'Sort collection by object attribute.' ),
				'enum'        => array(
					'author',
					'date',
					'id',
					'title',
				),
				'type'        => 'string',
			)
		);
	}

}